<?php

namespace Fir\Controllers;

use Fir\Models;
use Fir\Views;
use Fir\Languages\Language as Language;

/**
 * The base Controller upon which all the other controllers are extended on
 */
class Controller
{
    /**
     * The database connection
     * @var    object
     */
    public $db;

    /**
     * The site settings from the DB
     * @var    array
     */
    protected $settings;

    /**
     * The view object to be passed to the controllers
     * @var    object
     */
    protected $view;

    /**
     * The language array to be passed to the controllers and views
     * @var array
     */
    protected $lang;

    /**
     * The list of available languages
     * @var array
     */
    protected $languages;

    /**
     * User selected language
     * @var string
     */
    protected $language;

    /**
     * The current URL path (route) array to be passed to the controllers
     * @var array
     */
    protected $url;

    /**
     * Currency Symbol
     * @var array
     */
    protected $currency;

    /**
     * Theme Array
     * @var array
     */
    protected $theme;

    /**
     * Controller constructor.
     * @param $db
     * @param $url
     */
    public function __construct($db, $url)
    {
        $this->db = $db;
        $this->url = $url;

        // Set the site settings
        $settings = $this->model('Settings');
        $this->settings = $settings->get();
        $this->currency = $settings->getCurrency();
		
		/* Use Theme Model */
		$themeModel = $this->model('Theme');
        $this->theme = $themeModel->get($this->settings['theme']);

        // Set the timezone
        if (!empty($this->settings['timezone'])) {
            date_default_timezone_set($this->settings['timezone']);
        }

        // Instantiate the Language system and set the default language
        $language = new Language();

        $this->lang = $language->set($this->settings['language']);
        $this->languages = $language->languages;
        $this->language = $language->get();

        // Instantiate the View
        $this->view = new Views\View($this->settings, $this->lang, $this->url, $this->currency, $this->theme);
    }

    /**
     * Get and instantiate the requested model
     * @param   $model  string  The model to instantiate
     * @return  object
     */
    public function model($model)
    {
        require_once(__DIR__ . '/../models/' . $model . '.php');

        // The namespace\class must be defined in a string as it can't be called shorted using new namespace\$var
        $class = 'Fir\Models\\' . $model;

        return new $class($this->db);
    }

    /**
     * Get and instantiate the requested library
     * @param   $library  string  The library to instantiate
     * @return  object
     */
    public function library($library)
    {
        require_once(__DIR__ . '/../libraries/' . $library . '.php');

        // The namespace\class must be defined in a string as it can't be called shorted using new namespace\$var
        $class = 'Fir\Libraries\\' . $library;

        return new $class($this->db);
    }

    /**
     * Output the final view to the user based on the request type
     *
     * @param   $data   array   The output generated by the controllers
     */
    public function run($data = null)
    {
		if(empty($this->url[0])) {
			$this->url[0] = 'home';
		}	
		
        if($this->url[0] == 'admin') {
			if($this->url[1] == 'login'):
			    $data['url'] = $this->url[1];
			    $data['navigation_view'] = $this->getLoginHeader();
				$data['content_view'] = $data['content'];
			    $data['footer_view'] = $this->getLoginFooter();
			elseif($this->url[1] == 'fileinfo'):	
				$data['content_view'] = $data['content'];
			else:
			    $data['url'] = $this->url[1];
				$data['navigation_view'] = $this->getAdminNavigation();
				$data['sidenav_view'] = $this->getAdminSidenav();
				$data['content_view'] = $data['content'];
				$data['footer_view'] = $this->getAdminFooter();
			endif;
			if (isAjax()) {
				echo json_encode(['title' => $this->view->docTitle(), 'navigation' => $data['navigation_view'], 'content' => $data['content_view'], 'footer' => $data['footer_view']]);
			}elseif($this->url[1] == 'fileinfo'){	
				echo $this->view->render($data, 'wrapper-admin-fileinfo');
			} else {
				echo $this->view->render($data, 'wrapper-admin');
			}
        }
        elseif($this->url[0] == 'requests') {
            if(isAjax()) {
				if($this->url[1] == 'postmessage' || $this->url[1] == 'f_postmessage' || $this->url[1] == 'post_dispute' || $this->url[1] == 'f_post_dispute' 
				|| $this->url[1] == 'admin_post_dispute' || $this->url[1] == 'get_projects'){
					foreach($data as $d){
						echo $d;
					}
				}else{
                echo json_encode($data);
				}	
            } else {
                redirect();
            }
        } else {
			if($this->url[0] == FREELANCER_URL) :
			    $data['url'] = $this->url[0];
				$data['header_view'] = $this->getHeader();
				$data['sidenav_view'] = $this->getFreelancerSidenav();
				$data['content_view'] = $data['content'];
				$data['footer_view'] = $this->getFooter();
				$data['scripts_view'] = $this->getFreelancerScripts();
			elseif($this->url[0] == CLIENT_URL) :
			    $data['url'] = $this->url[0];
				$data['header_view'] = $this->getHeader();
				$data['sidenav_view'] = $this->getClientSidenav();
				$data['content_view'] = $data['content'];
				$data['footer_view'] = $this->getFooter();
				$data['scripts_view'] = $this->getClientScripts();
			else:	
		
				/* Use Product Model */
				$clientModel = $this->model('Client');
				$userModel = $this->model('User');
				if($this->url[0] == 'project'){
					$data['project_slug'] = $clientModel->get_project($this->url[1]);
				}
				if($this->url[0] == FREELANCERS_URL && isset($this->url[1]) == 'portfolio' || $this->url[0] == CLIENTS_URL && isset($this->url[1]) == 'projects'){
				    $data['user_slug'] = $userModel->get($this->url[2]);
				}
				
			    $data['url'] = $this->url[0];
			    $data['url_two'] = isset($this->url[1]);
				$data['header_view'] = $this->getHeader();
				$data['content_view'] = $data['content'];
				$data['footer_view'] = $this->getFooter();
				$data['scripts_view'] = $this->getHomeScripts();
			endif;
			if (isAjax()) {
				echo json_encode(['title' => $this->view->docTitle(), 'header' => $data['header_view'], 'content' => $data['content_view'], 'footer' => $data['footer_view']]);
			}elseif($this->url[0] == FREELANCER_URL || $this->url[0] == CLIENT_URL){	
				echo $this->view->render($data, 'wrapper-user');
			} else {
				echo $this->view->render($data, 'wrapper');
			}
        }
    }

    /**
     * This is the method from where you can pass data to the Header view
     *
     * @return string
     */
    private function getHeader()
    {
        $data = [
            'languages_list'    => $this->languages,
            'language'          => $this->language
        ];
		
		$data['url'] = $this->url[0];
		
		/*Use User Library*/
        $user = $this->library('User');
		$data['user'] = $user->data();
		$data['user_isloggedin'] = $user->isLoggedIn();
		
		/*Use Client Model*/
        $clientModel = $this->model('Client');
		$data['client_unread_messages'] = $clientModel->unread_messages($data['user']['userid']);
		$data['client_unread_notifications'] = $clientModel->unread_notifications($data['user']['userid']);
		
		/*Use Freelancer Model*/
        $freelancerModel = $this->model('Freelancer');
		$data['freelancer_unread_messages'] = $freelancerModel->unread_messages($data['user']['userid']);
		$data['freelancer_unread_notifications'] = $freelancerModel->unread_notifications($data['user']['userid']);

        return $this->view->render($data, 'shared/header');
    }

    /**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getFooter()
    {
        $data = [];
        return $this->view->render($data, 'shared/footer');
    }

    /**
     * This is the method from where you can pass data to the Scripts View
     *
     * @return string
     */
    private function getHomeScripts()
    {
        $data = [];
        return $this->view->render($data, 'home/template/scripts');
    } 

    /**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getFreelancerSidenav()
    {
        $data = [];
		$data['url'] = $this->url[1];
		
		/*Use User Library*/
        $user = $this->library('User');
		$data['user'] = $user->data();
		
		/*Use Freelancer Model*/
        $freelancerModel = $this->model('Freelancer');
		$data['freelancer_unread_invites'] = $freelancerModel->unread_invites($data['user']['userid']);
		$data['freelancer_unread_files'] = $freelancerModel->unread_files($data['user']['userid']);
		$data['freelancer_unread_escrow'] = $freelancerModel->unread_escrow($data['user']['userid']);
		$data['freelancer_unread_disputes'] = $freelancerModel->unread_disputes($data['user']['userid']);
		
        return $this->view->render($data, 'freelancer/template/sidenav');
    }

    /**
     * This is the method from where you can pass data to the Scripts View
     *
     * @return string
     */
    private function getFreelancerScripts()
    {
        $data = [];
        return $this->view->render($data, 'freelancer/template/scripts');
    }    
	
	/**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getClientSidenav()
    {
        $data = [];
		$data['url'] = $this->url[1];
		
		/*Use User Library*/
        $user = $this->library('User');
		$data['user'] = $user->data();
		
		/*Use Freelancer Model*/
        $clientModel = $this->model('Client');
		$data['client_unread_files'] = $clientModel->unread_files($data['user']['userid']);
		$data['client_unread_disputes'] = $clientModel->unread_disputes($data['user']['userid']);
		
        return $this->view->render($data, 'client/template/sidenav');
    }

    /**
     * This is the method from where you can pass data to the Scripts View
     *
     * @return string
     */
    private function getClientScripts()
    {
        $data = [];
        return $this->view->render($data, 'client/template/scripts');
    }

    /**
     * This is the method from where you can pass data to the Header view
     *
     * @return string
     */
    private function getLoginHeader()
    {
        $data = [
            'languages_list'    => $this->languages,
            'language'          => $this->language
        ];
		
		$data['url'] = $this->url[0];
		
		/* Use Settings Model */
		$settingsModel = $this->model('Settings');
        $data['settings'] = $settingsModel->get();

        return $this->view->render($data, 'shared/login_header');
    }

    /**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getLoginFooter()
    {
        $data = [];
        return $this->view->render($data, 'shared/login_footer');
    }

    /**
     * This is the method from where you can pass data to the Header view
     *
     * @return string
     */
    private function getAdminNavigation()
    {
        $data = [
            'languages_list'    => $this->languages,
            'language'          => $this->language
        ];
		
		$data['url'] = $this->url[1];
		
		/*Use Admin Library*/
        $admin = $this->library('Admin');
		$data['admin'] = $admin->data();

        return $this->view->render($data, 'admin/template/navigation');
    }

    /**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getAdminSidenav()
    {
        $data = [];
		$data['url'] = $this->url[1];
        $admin = $this->library('Admin');
		$data['admin'] = $admin->data();
		
		/* Use Settings Model */
		$settingsModel = $this->model('Settings');
        $data['settings'] = $settingsModel->get();
		
		/*Use Admin Model*/
        $adminModel = $this->model('Admin');
		$data['admin_unread_disputes'] = $adminModel->unread_disputes($data['admin']['adminid']);
		$data['unread_requests'] = $adminModel->unread_requests();
		$data['unread_withdrawals'] = $adminModel->unread_withdrawals();
		
        return $this->view->render($data, 'admin/template/sidenav');
    }

    /**
     * This is the method from where you can pass data to the Footer view
     *
     * @return string
     */
    private function getAdminFooter()
    {
        $data = [];
        return $this->view->render($data, 'admin/template/footer');
    }
}